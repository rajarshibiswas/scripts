" Vundle Plugin manager 
set nocompatible              " be iMproved, required
filetype off                  " required
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
call vundle#end()            " required
filetype plugin indent on    " required
" vim plugins - take over the functionality of vim macros
filetype plugin on " turning on the file type plugin

" Airline theme setup 
"let g:airline_theme='luna'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'


syntax on
syntax enable
set laststatus=2
"set statusline=%<%F\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set splitright
"
" Enable filetype detection
" detects the type of the file by checking the filename and sometimes the
" contents of the file for specific text.
filetype on
filetype indent on

" use this if you have started with an empty file and typed text that makes
" it possible to detect the type of text
filetype detect

" Text Formating --
" Make sure that long lines wrap around the screen
set wrap

" Fixes
" 1. arrow keys that display A B C D on remote shell.
" 2. Fixes home and end keys.
" 3. Fixes backspace
set nocompatible

" Changes Hrithik
set textwidth=71
set formatoptions=cq

" To display ruler. Cursor position in the lower right corner
set ruler

" vim uses the indent of the previous line for a newly created line
set cindent
set ai
set hidden

" Display an incomplete command in the lower right corner of vim window
set showcmd

" Ignoring case while searching
" case insensitive searches and replaces
"set ic
" case sensitive searches and replaces
set noic
" Searching for whole words
" delineate words using markers
" 	start-of-word marker: \<
" 	end-of-word marker: \>
" Highlighting matches
set hlsearch
" to remove highlighting
set nohlsearch	":nohl

" we can disable highlighting using :nohlsearch. This doesnot reset highlighting" ,but as soon as we execute search cmd the highlighting will be used again.
"
" Tuning searches
" To allow vim to display a match for a string while you are still typing it
" displays the pattern when halfway typing it.
set incsearch
" By default searching wraps around the end of the file
" to stop the search at the end-of-the-file or start-of-the-file use..
"set nowrapscan
"
" When a bracket is inserted, briefly jump to the matching one.
set showmatch

" Tab settings
" expandtab : converts tabs to spaces.
" noexpandtab : does not converts tab to spaces.
"set expandtab
set noexpandtab

" vim autocomplete feature
" usage:
" iab <key to be expanded> <actual-expansion>
" warning: sometimes may lead to unnecessary expansions.
iab #i #include
" ...typing #d and space will expand this to #define
iab #d #define 
iab teh the

nmap <F1> :ls<CR>:e #
nmap <C-Q> :ls<CR>:e #
nmap <C-C> :nohlsearch<C-M>
nmap <C-S> :shell<C-M>

set bs=2
color elflord "(best when doing perl)


" ctags.vim - 'bar' at the bottom of my view window, showing the file-name,
" row number, col number
" Before sourcing the script do:
    let g:ctags_path='/usr/local/bin/ctags'
    let g:ctags_args='-I __declspec+'
"        (or whatever other additional arguments you want to pass to ctags)
    let g:ctags_title=1		" To show tag name in title bar.
    let g:ctags_statusline=1	" To show tag name in status line.
"    let generate_tags=1	" To start automatically when a supported
"				" file is opened.

imap <C-E> <Esc>:w<CR>li
"set viminfo='1000,f1,<500,\/50,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif


" /* Default cscope mappings */
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-]> :cs find g <C-R>=expand("<cword>")<CR><CR>

map [ [[
map ] ]]
map __ :b#^M


" used by show block name plugin
"autocmd FuncUndefined * exe 'runtime autoload/' . expand('<afile>') . '.vim'
" au CursorHold * call ShowBlockName('quiet')
" map <silent> g[[ :call ShowBlockName()<CR>
" map <silent> g]] :call ShowBlockName('OFF')<CR>
" nnoremap [d :call ShowBlockName('[d')<CR>
" nnoremap [i :call ShowBlockName('[i')<CR>
nmap <C-\>p :call ShowBlockName()<CR>


imap <C-K> <Esc>lbi
imap <C-L> <Esc>lwi
imap <C-O> <Esc>:w<CR>li
imap <C-J> <Esc>ldwi
imap <C-Z> <Esc>ui
imap <C-\>] <Esc>l]}i
imap <C-\>[ <Esc>l[{i
imap <C-\>( <Esc>l[(i
imap <C-\>) <Esc>l])i
imap <C-\>p <Esc>l%i

:set mps+=<:>  "for matching pairs {},() are present by default.

set ic
set sm
set ai
set cindent
set hidden
map [ [[
map ] ]]
map __ :b#
set textwidth=71
set formatoptions=cq
set nu
set hlsearch
set t_Co=256
syntax on

colorscheme delek
